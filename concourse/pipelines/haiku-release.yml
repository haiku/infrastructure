---
roles:
  - name: owner
    github:
      teams: ["haiku:infrastructure"]
    local:
      users: ["admin"]
resources:
  - name: pipeline-time-trigger
    type: time
    icon: alarm
    source:
      start: 1:00 AM
      stop: 6:00 AM
      location: America/Chicago
      days: ((days))
  - name: haiku-git
    type: git
    icon: git
    source:
      uri: https://review.haiku-os.org/haiku.git
      branch: ((branch))
# Jobs
jobs:
  - name: image-((branch))-((arch))
    public: true
    plan:
      - get: pipeline-time-trigger
        trigger: true
      - get: haiku-git
        trigger: false
      - task: build ((branch)) ((media))
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: haiku/toolchain-worker-((branch)) }
          inputs:
            - name: haiku-git
          outputs:
            - name: generated.((arch))
          params:
            DEFAULT_GEOLOCATION_SERVICE_KEY: ((mozilla-service-key))
            DEFAULT_GEOCODING_SERVICE_KEY: ((geocoding-service-key))
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd generated.((arch))
                TOOLCHAIN_PRIMARY=""
                TOOLCHAIN_SECONDARY=""
                case "((arch))" in
                    "x86_gcc2h")
                        PRI_TRIPLET=$(../haiku-git/build/scripts/find_triplet x86_gcc2)
                        SEC_TRIPLET=$(../haiku-git/build/scripts/find_triplet x86)
                        TOOLCHAIN_PRIMARY="--cross-tools-prefix /toolchains/cross-tools-x86_gcc2/bin/${PRI_TRIPLET}-"
                        TOOLCHAIN_SECONDARY="--cross-tools-prefix /toolchains/cross-tools-x86/bin/${SEC_TRIPLET}-"
                        ;;
                    "x86_64h")
                        PRI_TRIPLET=$(../haiku-git/build/scripts/find_triplet x86_64)
                        SEC_TRIPLET=$(../haiku-git/build/scripts/find_triplet x86)
                        TOOLCHAIN_PRIMARY="--cross-tools-prefix /toolchains/cross-tools-x86_64/bin/${PRI_TRIPLET}-"
                        TOOLCHAIN_SECONDARY="--cross-tools-prefix /toolchains/cross-tools-x86/bin/${SEC_TRIPLET}-"
                        ;;
                    *)
                        PRI_TRIPLET=$(../haiku-git/build/scripts/find_triplet ((arch)))
                        TOOLCHAIN_PRIMARY="--cross-tools-prefix /toolchains/cross-tools-((arch))/bin/${PRI_TRIPLET}-"
                        TOOLCHAIN_SECONDARY=""
                        ;;
                esac
                echo "// Autogenerated by the build system" > ../haiku-git/src/kits/network/libnetservices/DefaultGeolocationServiceKey.h
                echo "#define DEFAULT_GEOLOCATION_SERVICE_KEY \"$DEFAULT_GEOLOCATION_SERVICE_KEY\"" >> ../haiku-git/src/kits/network/libnetservices/DefaultGeolocationServiceKey.h
                echo "#define DEFAULT_GEOCODING_SERVICE_KEY \"$DEFAULT_GEOCODING_SERVICE_KEY\"" >> ../haiku-git/src/kits/network/libnetservices/DefaultGeolocationServiceKey.h
                ../haiku-git/configure --distro-compatibility official $TOOLCHAIN_PRIMARY $TOOLCHAIN_SECONDARY
                jam -j2 -q @((profile))-((media))
      - task: package ((branch)) ((media))
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: haiku/general-worker }
          inputs:
            - name: haiku-git
            - name: generated.((arch))
          outputs:
            - name: images.((arch))
          params:
            S3_ENDPOINT: ((s3endpoint))
            S3_KEY: ((s3key))
            S3_SECRET: ((s3secret))
          run:
            path: /bin/bash
            args:
              - -c
              - |
                RELEASE=$(git -C haiku-git describe --tags --long | cut -d\- -f1,2 | sed 's/\-/\_/g' | sed 's/\_0//g')
                if [[ "((media))" == "anyboot" ]]; then
                  cp generated.((arch))/haiku-((profile))-((media)).iso images.((arch))/haiku-((branch))-$RELEASE-((arch))-((media)).iso
                elif [[ "((media))" == "mmc" ]]; then
                  cp generated.((arch))/haiku-((media)).image images.((arch))/haiku-((branch))-$RELEASE-((arch))-((media)).image
                elif [[ "((media))" == "raw" ]]; then
                  cp generated.((arch))/haiku-((profile)).image images.((arch))/haiku-((branch))-$RELEASE-((arch))-((media)).image
                fi
                cp haiku-git/ReadMe.md images.((arch))/ReadMe.md
                cd images.((arch))
                zip -9 haiku-((branch))-$RELEASE-((arch))-((media)).zip ReadMe.md haiku-((branch))-$RELEASE-((arch))-*.*
                rm -f *.md *.image *.iso
                sha256sum --tag haiku-((branch))-$RELEASE-((arch))-((media)).zip > haiku-((branch))-$RELEASE-((arch))-((media)).zip.sha256
                echo "untrusted comment: minisign encrypted secret key" > /tmp/minisign.key
                echo "((minisign-private))" >> /tmp/minisign.key
                echo "((minisign-key))" | minisign -s /tmp/minisign.key -Sm haiku-((branch))-$RELEASE-((arch))-((media)).zip
                rm -f /tmp/minisign.key
                mc config host add remote $S3_ENDPOINT $S3_KEY $S3_SECRET --api "s3v4"
                mc cp -q haiku-((branch))-$RELEASE-((arch))-((media)).zip remote/((bucket_image))/((arch))/
                echo "$S3_ENDPOINT/((bucket_image))/((arch))/haiku-((branch))-$RELEASE-((arch))-((media)).zip was successfully uploaded!"
                mc cp -q haiku-((branch))-$RELEASE-((arch))-((media)).zip.sha256 remote/((bucket_image))/((arch))/
                echo "$S3_ENDPOINT/((bucket_image))/((arch))/haiku-((branch))-$RELEASE-((arch))-((media)).zip.sha256 was successfully uploaded!"
                mc cp -q haiku-((branch))-$RELEASE-((arch))-((media)).zip.minisig remote/((bucket_image))/((arch))/
                echo "$S3_ENDPOINT/((bucket_image))/((arch))/haiku-((branch))-$RELEASE-((arch))-((media)).zip.minisig was successfully uploaded!"
  - name: repo-((branch))-((arch))
    public: true
    plan:
      - get: pipeline-time-trigger
        trigger: true
      - get: haiku-git
        trigger: false
      - task: build ((branch)) repository
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: haiku/toolchain-worker-((branch)) }
          inputs:
            - name: haiku-git
          outputs:
            - name: generated.((arch))
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd generated.((arch))
                TOOLCHAIN_PRIMARY=""
                TOOLCHAIN_SECONDARY=""
                case "((arch))" in
                    "x86_gcc2h")
                        PRI_TRIPLET=$(../haiku-git/build/scripts/find_triplet x86_gcc2)
                        SEC_TRIPLET=$(../haiku-git/build/scripts/find_triplet x86)
                        TOOLCHAIN_PRIMARY="--cross-tools-prefix /toolchains/cross-tools-x86_gcc2/bin/${PRI_TRIPLET}-"
                        TOOLCHAIN_SECONDARY="--cross-tools-prefix /toolchains/cross-tools-x86/bin/${SEC_TRIPLET}-"
                        ;;
                    "x86_64h")
                        PRI_TRIPLET=$(../haiku-git/build/scripts/find_triplet x86_64)
                        SEC_TRIPLET=$(../haiku-git/build/scripts/find_triplet x86)
                        TOOLCHAIN_PRIMARY="--cross-tools-prefix /toolchains/cross-tools-x86_64/bin/${PRI_TRIPLET}-"
                        TOOLCHAIN_SECONDARY="--cross-tools-prefix /toolchains/cross-tools-x86/bin/${SEC_TRIPLET}-"
                        ;;
                    *)
                        PRI_TRIPLET=$(../haiku-git/build/scripts/find_triplet ((arch)))
                        TOOLCHAIN_PRIMARY="--cross-tools-prefix /toolchains/cross-tools-((arch))/bin/${PRI_TRIPLET}-"
                        TOOLCHAIN_SECONDARY=""
                        ;;
                esac
                ../haiku-git/configure --distro-compatibility official $TOOLCHAIN_PRIMARY $TOOLCHAIN_SECONDARY
                jam -q @((profile))-raw build \<repository\>Haiku
      - task: prepare ((branch)) repository
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: haiku/general-worker }
          inputs:
            - name: haiku-git
            - name: generated.((arch))
          outputs:
            - name: repository.((arch))
          params:
            S3_ENDPOINT: ((s3endpoint))
            S3_KEY: ((s3key))
            S3_SECRET: ((s3secret))
          run:
            path: /bin/bash
            args:
              - -c
              - |
                PRI_ARCH="((arch))"
                case "((arch))" in
                    "x86_gcc2h" | "x86_64h")
                        PRI_ARCH=$(echo "((arch))" | sed 's/h$//')
                        ;;
                esac
                REPODIR="generated.((arch))/objects/haiku/$PRI_ARCH/packaging/repositories/Haiku"
                VERSION=$(basename $REPODIR/packages/haiku-*.hpkg | cut -d- -f2)
                TARGET_REPO="repository.((arch))/$PRI_ARCH/$VERSION"
                mkdir -p $TARGET_REPO
                cp -R $REPODIR/* $TARGET_REPO
                echo "untrusted comment: minisign encrypted secret key" > /tmp/minisign.key
                echo "((minisign-private))" >> /tmp/minisign.key
                echo "((minisign-key))" | minisign -s /tmp/minisign.key -Sm $TARGET_REPO/repo
                rm -f /tmp/minisign.key
                mc config host add remote $S3_ENDPOINT $S3_KEY $S3_SECRET --api "s3v4"
                mc cp -q --recursive $TARGET_REPO remote/((bucket_repo))/((branch))/$PRI_ARCH/
                echo "Haiku $PRI_ARCH repository $VERSION was successfully uploaded!"
